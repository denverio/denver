#!/usr/bin/env sh

projectRootPath=$(cd "$(dirname "$0")/../.."; pwd)
# used in .env file
realUser=${SUDO_USER:-$USER}
dockerUser=${DOCKER_ID_USER:-$realUser}
network=${DE_NETWORK_NAME:-$DE_VIM_NETWORK_NAME}

denver_vim_printenv() {
  printenv | grep -E '^DE_VIM_'
  echo
}

denver_vim_build() {
  local argsMsg="without args"
  [ $# -ne 0 ] && argsMsg="with args $@"

  echo "Building image \
\"${DE_VIM_SCOPE}/${DE_VIM_NAME}\" \
${argsMsg}..."
  echo

  sudo docker build \
    -t ${DE_VIM_SCOPE}/${DE_VIM_NAME} \
    "$@" \
    $projectRootPath

  return 0
}

denver_vim_remove() {
  echo "Removing image \
\"${DE_VIM_SCOPE}/${DE_VIM_NAME}\"..."
  echo

  sudo docker image rm \
    -f ${DE_VIM_SCOPE}/${DE_VIM_NAME}

  return 0
}

denver_vim_create_network() {
  sudo docker network create \
    --driver bridge \
    ${DE_VIM_NETWORK_NAME} 2> /dev/null && \
    echo "Created network \"${DE_VIM_NETWORK_NAME}\"! Using it..." || \
    echo "Using network \"${DE_VIM_NETWORK_NAME}\"..."

  echo
}

denver_vim_run() {
  local cmd=${1:-$DE_VIM_DEFAULT_COMMAND}
  [ $# -ne 0 ] && shift

  local argsMsg="without args"
  [ $# -ne 0 ] && argsMsg="with args $@"

  echo "Running container \
\"${DE_VIM_SCOPE}_${DE_VIM_NAME}\""
  echo "  based on image \
\"${DE_VIM_SCOPE}/${DE_VIM_NAME}\""
  echo "  with command \"${cmd}\" ${argsMsg}..."
  echo

  denver_vim_create_network

  sudo docker run \
    -itd \
    --rm \
    --name "${DE_VIM_SCOPE}_${DE_VIM_NAME}" \
    --network ${DE_VIM_NETWORK_NAME} \
    -h "denver-${DE_VIM_NAME}" \
    -p ${DE_VIM_SSH_PORT}:22 \
    -v ${DE_VIM_VOLUME_APP}:/app \
    -v ${DE_VIM_VOLUME_WORKSPACE}:/workspace \
    ${DE_VIM_SCOPE}/${DE_VIM_NAME} \
    ${cmd} \
    "$@"

  return 0
}

denver_vim_stop() {
  echo "Stopping container \
\""${DE_VIM_SCOPE}_${DE_VIM_NAME}"\"..."
  echo

  sudo docker container stop \
    "${DE_VIM_SCOPE}_${DE_VIM_NAME}"

  return 0
}

denver_vim_main() {
  local runner=${1:-"run"}

  if [ -s "$projectRootPath/.env" ] 
  then
    eval $(env $(cat "$projectRootPath/.env"; env) | grep -E '^(DE_|DOCKER_)' | sed 's/^/export /')
  fi

  [ "$runner" != 'printenv' ] &&
    denver_vim_printenv

  {
    [ $# -ne 0 ] && shift
    denver_vim_${runner} "$@" 2>/dev/null
  } || denver_vim_run $runner "$@"

  return 0
}
denver_vim_main "$@"

